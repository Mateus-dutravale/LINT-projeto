import torch
from PIL import Image
import torchvision.transforms as transforms

def load_image(image_path):
    # Load the image and convert it to a tensor
    image = Image.open(image_path)
    transformation = transforms.Compose([transforms.ToTensor()])
    return transformation(image)

def torch2D_Hausdorff_distance(x,y): # Input be like (Batch,width,height)
    x = x.float()
    y = y.float()
    distance_matrix = torch.cdist(x,y,p=2) # p=2 means Euclidean Distance

    value1 = distance_matrix.min(2)[0].max(1, keepdim=True)[0]
    value2 = distance_matrix.min(1)[0].max(1, keepdim=True)[0]

    value = torch.cat((value1, value2), dim=1)
    return value.max(1)[0]

if __name__ == "__main__":
    # Substitua os caminhos abaixo pelos caminhos reais das suas imagens
    caminho_u = 'Projeto-LINT/script/enhancement/scunet/blurred/2nd_camera_online_for_the_Long_Incident_Fire_seen_from_Bald_Mt_at_842_AM_FR-1240_blur.png'  ## input imagem perfeita
    caminho_v = 'Projeto-LINT/script/downgrade/blurred/2nd_camera_online_for_the_Long_Incident_Fire_seen_from_Bald_Mt_at_842_AM_FR-1240_blur.jpg'  ## input imagem aprimorada

    imagem_u = load_image(caminho_u)
    imagem_v = load_image(caminho_v)

    print("Formato de entrada é (B, L, A):", imagem_u.shape, imagem_v.shape)
    distancia_HD = torch2D_Hausdorff_distance(imagem_u, imagem_v)
    distancia_HD = torch.max(distancia_HD)
    print("Distância de Hausdorff é:", distancia_HD)  ## maxima distancia de uma imagem a outra 
